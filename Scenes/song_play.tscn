[gd_scene load_steps=9 format=3 uid="uid://buufi8lbseah8"]

[ext_resource type="PackedScene" uid="uid://c7fl4innwrghc" path="res://Objects/steelpan.tscn" id="2_mj7i1"]
[ext_resource type="Theme" uid="uid://ccq60t47rgtuy" path="res://Themes/start_menu_theme.tres" id="3_113jm"]
[ext_resource type="PackedScene" uid="uid://dco1w80mpoq86" path="res://Objects/notes_sound.tscn" id="3_oph0d"]
[ext_resource type="Texture2D" uid="uid://duhcgicm0tyyh" path="res://GUI/gui icons/close_56dp_FFFFFF_FILL0_wght400_GRAD0_opsz48.svg" id="4_cs45u"]

[sub_resource type="GDScript" id="GDScript_osh0b"]
script/source = "extends Control
var json = '[
  {
	\"note\": \"C1\",
	\"start\": 0,
	\"end\": 0
  },
{
	\"note\": \"C1\",
	\"start\": 0,
	\"end\": 0.5
  },
	{
	\"note\": \"C1\",
	\"start\": 3,
	\"end\": 4
  },
	{
	\"note\": \"C1\",
	\"start\": 4.2,
	\"end\": 4.2
  }
]'
var song_id
var song_name
var creator_name
var score:int = 0
var counter:int = 0
var end_counter:int = 0
var song_end:bool = false
var song_time:float
var incoming_notes:Array = [] #imports all the notes from the song resource file
var note_image = preload(\"uid://0pfsvlcupdeb\") # a single notes object
var roll_note_image = preload(\"res://Objects/rolling note.tscn\") # a rolling note object
var shockwave = preload(\"res://Objects/shockwave.tscn\") #shockwave object for mouse when note is played
@export var note_travel_time:float = 1 #indicates how many seconds the note will travel from its spawn time to its actrual time in the song. The speed of the note will depend on this variable
var hit_notes:Array = []
var incoming_note
var mouse
var current_note
var queue_free_timer = 1
var practice = false
signal song_complete

func _ready():
	$Steelpan.quality.connect(note_is_played)
	$Steelpan.global_position = get_viewport_rect().size/2
	
	incoming_notes = JSON.parse_string(json)
	end_counter = incoming_notes.size()
	song_time = -3
	



func _process(delta):
	if(get_parent().mode != \"play song\"):
		queue_free()
	
	
	if(practice == true):
		if($Incoming_notes.get_child_count() == 0):
			song_time += delta
	else:
		song_time += delta

	#spawns a shockwave on the screen where the mouse clicks
	if Input.is_action_just_pressed(\"play\") :
		mouse = get_global_mouse_position()
		var spawn = shockwave.instantiate()
		spawn.global_position = mouse
		add_child(spawn)
	
	
	
	$Label.text = \"score: \" + str(score)
	if counter < incoming_notes.size():
		if ( incoming_notes[counter][\"start\"] - note_travel_time ) <= song_time :
			for i in $Steelpan.get_children():
				if \"note\" in i: #checks if the varable note is in the notes on the steelpan
					if i[\"note\"] == incoming_notes[counter][\"note\"]:
						if incoming_notes[counter][\"start\"] == incoming_notes[counter][\"end\"] :
							incoming_note = note_image.instantiate()
						else:
							incoming_note = roll_note_image.instantiate()
						var temp_note = incoming_notes[counter]
						incoming_note.note = i.note
						incoming_note.start = temp_note[\"start\"]
						incoming_note.end = temp_note[\"end\"]
						incoming_note.true_scale = i.scale * $Steelpan.scale
						incoming_note.global_position = i.global_position
						incoming_note.time_to_travel = note_travel_time
						incoming_note.delay = song_time - (incoming_note.start - note_travel_time)  
						incoming_note.pause = practice
						$Incoming_notes.add_child(incoming_note)
			counter += 1
			incoming_note = null
	
	
	if $Incoming_notes.get_children().size() > 0:
		current_note = $Incoming_notes.get_child(0) #selects the first note in the the incoming notes
		current_note.modulate = Color(\"ffffff\")
		
	for note in $Steelpan.get_children(): #highlights the most current note by making the hitbox visible
		if \"note\" in note and current_note != null:
			if note.note == current_note.note:
				note.visible = true
			else:
				note.visible = false
		
		
	
	if counter >= end_counter: #ends song and switches to main menu once song is completed
		if practice == false:
			if $Incoming_notes.get_child_count() == 0 :
				var acc:float = 0
				var num_of_single_notes:int = 0

				for i in incoming_notes: # calculates how many single notes was in the song. Rolling notes do not count towards accuracy
					if i[\"start\"] == i[\"end\"]:
						num_of_single_notes += 1
				acc = (score / (num_of_single_notes * 100.0)) * 100
				acc = snappedf(acc, 0.01)
				song_complete.emit(song_id, song_name, creator_name, score, acc)
				queue_free()
		else:
			if $Incoming_notes.get_child_count() == 0 :
				get_parent().switch_screen(\"song select\")
	

	
	
func note_is_played(diff): # calculates how close the note was played to its actrual position in the song
	if practice == false:
		if diff > -0.05 and diff < 0.05:
			print(diff)
			score += 100
		elif diff > -0.1 and diff < 0.1:
			print(diff)
			score += 50
		elif diff > -0.2 and diff < 0.2:
			print(diff)
			score += 25
		elif diff > -0.5 and diff < 0.5:
			print(diff)
			score += 10
		else:
			print(diff)
			score += 5
	

	


func _on_exit_pressed():
	get_parent().switch_screen(\"song select\")
	pass # Replace with function body.
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_g1g0r"]
bg_color = Color(0.842635, 3.56168e-06, 4.81307e-07, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(0, 0, 0, 0)
corner_radius_top_left = 20
corner_radius_top_right = 20
corner_radius_bottom_right = 20
corner_radius_bottom_left = 20
corner_detail = 15
shadow_color = Color(0, 0, 0, 0)
shadow_size = 10
shadow_offset = Vector2(5, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_1dcvd"]
bg_color = Color(0.222256, 5.6704e-07, 6.01634e-09, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(0, 0, 0, 0)
corner_radius_top_left = 20
corner_radius_top_right = 20
corner_radius_bottom_right = 20
corner_radius_bottom_left = 20
corner_detail = 15
shadow_color = Color(0, 0, 0, 0)
shadow_size = 10
shadow_offset = Vector2(5, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_daa66"]
bg_color = Color(1, 1, 1, 1)
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
border_color = Color(0, 0, 0, 0)
corner_radius_top_left = 20
corner_radius_top_right = 20
corner_radius_bottom_right = 20
corner_radius_bottom_left = 20
corner_detail = 15
shadow_color = Color(0, 0, 0, 0)
shadow_size = 10
shadow_offset = Vector2(5, 0)

[node name="song_play" type="Control"]
self_modulate = Color(1, 1, 1, 0)
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_osh0b")
note_travel_time = 2.0

[node name="Steelpan" parent="." instance=ExtResource("2_mj7i1")]
scale = Vector2(0.24, 0.24)

[node name="Incoming_notes" type="Node2D" parent="."]

[node name="NotesSound" parent="." instance=ExtResource("3_oph0d")]

[node name="Label" type="Label" parent="."]
custom_minimum_size = Vector2(0, 100)
layout_mode = 1
anchors_preset = 10
anchor_right = 1.0
offset_bottom = 23.0
grow_horizontal = 2
theme = ExtResource("3_113jm")
theme_override_font_sizes/font_size = 80
text = "SCore"
uppercase = true

[node name="Exit" type="Button" parent="."]
custom_minimum_size = Vector2(80, 80)
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -8.0
offset_bottom = 8.0
grow_horizontal = 0
theme = ExtResource("3_113jm")
theme_override_colors/icon_hover_color = Color(0.556953, 0.556953, 0.556953, 1)
theme_override_colors/icon_pressed_color = Color(0, 0, 0, 1)
theme_override_colors/icon_focus_color = Color(1, 1, 1, 1)
theme_override_colors/icon_normal_color = Color(1, 1, 1, 1)
theme_override_styles/focus = SubResource("StyleBoxFlat_g1g0r")
theme_override_styles/hover = SubResource("StyleBoxFlat_1dcvd")
theme_override_styles/pressed_mirrored = SubResource("StyleBoxFlat_daa66")
theme_override_styles/pressed = SubResource("StyleBoxFlat_daa66")
theme_override_styles/normal = SubResource("StyleBoxFlat_g1g0r")
icon = ExtResource("4_cs45u")
icon_alignment = 1
expand_icon = true

[connection signal="pressed" from="Exit" to="." method="_on_button_pressed"]
[connection signal="pressed" from="Exit" to="." method="_on_exit_pressed"]
